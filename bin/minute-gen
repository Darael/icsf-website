#!/usr/bin/php -f
<?php
	
	DEFINE('HEADER_PATTERN', '/^([a-z]+):(.+)$/');
	DEFINE('BODY_PATTERN', '/^(?<ws>\s*)(?<inst>.)(?<content>.+)$/');

	if ($argc != 2)
	{
		fputs(STDERR, 'Usage: ' . basename($argv[0]) . ' <source>' . PHP_EOL);
		exit(1);
	}

	$fin = fopen($argv[1],'r');

	if (! $fin)
	{
		fputs(STDERR, 'Unable to open file ' . $argv[1] . PHP_EOL);
		exit(2);
	}

	$headers = array();
	$lineno = 0;

	while (true)
	{
		$line = fgets($fin); ++$lineno;
		if (trim($line) === '') break;

		// Header format is <headername>: data
		// headername will only consist of a-z, lowercase
		if (preg_match(HEADER_PATTERN, $line, $header))
		{
			$headers[$header[1]] = $header[2];
		}
		else
		{
			err('Bad Header', $line); 
		}
	}

	if (!isset($headers['committee']))
	{
		err('No \'committee\' header set');
		exit(3);
	}

	if (!isset($headers['opened']))
	{
		err('No \'committee\' header set');
		exit(3);
	}

	if (!isset($headers['closed']))
	{
		err('No \'committee\' header set');
		exit(3);
	}
	
	$headers['opened'] = strtotime($headers['opened']);
	$headers['closed'] = strtotime($headers['closed']);
	$comment = isset($headers['comment']) ? $headers['comment'] : '';
?>
<!DOCTYPE html>
<!--<?php echo trim($headers['committee']); ?>-->
<!--<?php echo date('r', $headers['opened']); ?>-->
<!--<?php echo trim($comment); ?>-->
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en" dir="ltr">
	<head>
		<title>Minutes: <?php 
			echo trim($headers['committee']) . ' - ' . 
			date('j/m/Y'); ?> - ICSF</title>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<link rel="stylesheet" type="text/css" href="<!--SRVROOT-->/resources/style.css" />
		<link rel="stylesheet" type="text/css" href="<!--SRVROOT-->/resources/minutes.css" />
		<link href="http://fonts.googleapis.com/css?family=Lora|Alice" rel="stylesheet" type="text/css">
	</head>
	<body>
		<h1>
			<img id="logo" src="<!--SRVROOT-->/resources/logo.png" alt="ICSF" />
			ICSF
			<span style="font-size: 0.5em; line-height: normal;">
				Minutes
			</span>
			<span class="clear"></span>
		</h1>

		<nav>
			<a href="<!--SRVROOT-->/">Home</a>
			<a href="<!--SRVROOT-->/library/">Library</a>
			<a href="<!--SRVROOT-->/events/">Events</a>
			<a href="<!--SRVROOT-->/committee/">Committee</a>
			<a href="<!--SRVROOT-->/picocon/">Picocon</a>
			<hr />
			<a href="<!--SRVROOT-->/committee/minutes/">Meetings</a>
			<a href="<!--SRVROOT-->/committee/#constitution">Constitution</a>
		</nav>

		<h2>Minutes of a meeting of the <?php
			echo trim($headers['committee']) . ', '. date('jS F Y', $headers['opened']);
		?></h2>
		<p class="opened">Meeting Opened at <?php echo date('G:i', $headers['opened']); ?></p>

<?php 
	if (isset($headers['present'])): 
		$people = explode(',', $headers['present']);
?>
		<h3>Present</h3>
		<div class="peoples"><?php
		foreach ($people as $person)
			echo trim($person).PHP_EOL;
?></div>
<?php
	endif;
?>
<?php 
	if (isset($headers['apologies'])): 
		$people = explode(',', $headers['apologies']);
?>
		<h3>Apologies</h3>
		<div class="peoples"><?php
		foreach ($people as $person)
			echo trim($person).PHP_EOL;
?></div>
<?php
	endif;
	if (isset($headers['absent'])): 
		$people = explode(',', $headers['absent']);
?>
		<h3>Absent</h3>
		<div class="peoples"><?php
		foreach ($people as $person)
			echo trim($person).PHP_EOL;
?></div><?php
	endif;
?>
<?php
	$levels = array();

	while (!feof($fin))
	{
		$line = fgets($fin); ++$lineno;

		if (trim($line) !== '')
		{
			if (!preg_match(BODY_PATTERN, $line, $line_data))
			{
				err('Bad Line Syntax', $line_data);
			}
			else
			{
				switch($line_data['inst'])
				{
					case '=': handle_header($line_data); break;
					case '-': handle_bullet($line_data); break;
					case '+': handle_cont($line_data); break;
					case '<': handle_exit($line_data); break;
					case '>': handle_entrance($line_data); break;
					default: err('Unknown command ' . $line_data['inst'], $line);
				}
			}
		}
	}

	while (count($levels) > 0)
		close_level();

?>

		<p class="opened">Meeting Closed at <?php echo date('G:i', $headers['closed']); ?></p>

		<footer>
			<p class="copyright">Imperial College Science Fiction Society.
			Please report issues to <a class="sans"
			href="mailto:techpriest@icsf.org.uk">techpriest@icsf.org.uk</a></p>
		</footer>
	</body>
</html>
<?php

	function tabs($num)
	{
		return str_repeat("\t", $num);
	}

	function handle_header($line)
	{
		global $levels;
		while (count($levels) > 0)
			close_level();

		preg_match('/(=*)(.+)/', $line['content'], $contents);
		$h_level = 3 + strlen($contents[1]);

		echo PHP_EOL . PHP_EOL . tabs(2) . '<h' . $h_level . '>' . 
			trim($contents[2]) . 
			'</h' . $h_level . '>';
	}

	function close_level()
	{
		global $levels;
		echo '</li>' . PHP_EOL . tabs(1 + count($levels)) . '</ul>';
		unset($levels[count($levels)-1]);
	}

	function handle_bullet($line)
	{
		global $levels;
		$lvl = strlen($line['ws']);

		if ($lvl == count($levels) - 1)
		{
			echo '</li>';
		}
		else
		{
			if ($lvl < count($levels))
			{	
				while (count($levels) > $lvl)
					close_level();
			}
			else
			{
				if ($lvl > count($levels))
				{
					err('Level requested (' . $lvl . 
					') is too deep for containing level ' . count($levels) - 1);
					$lvl = count($levels);
				}
				echo PHP_EOL . tabs(2 + $lvl) . '<ul>';
			}
		}

		echo PHP_EOL . tabs(3 + $lvl) . '<li>' . trim($line['content']);
		$levels[$lvl] = trim($line['content']);
	}

	function handle_cont($line)
	{
		global $levels;
		echo PHP_EOL . tabs(3 + count($levels)) . trim($line['content']);
	}

	function handle_exit($line)
	{
	}

	function handle_entrance($line)
	{
	}

	function err($msg, $sup=null)
	{
		global $lineno;
		global $argv;

		fputs(STDERR, $msg . ': ' . $argv[1] . ' line ' . $lineno);
		if ($sup !== null)
		{
			fputs(STDERR, ' ' . $sup);
		}
		fputs(STDERR, PHP_EOL);
	}

